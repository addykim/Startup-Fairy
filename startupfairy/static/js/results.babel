class SearchResult extends React.Component {
  constructor() {
    super();
    this.state = {
      pageTitle: 'Result #',
      url: '/startupfairy/',
      active: true,
      pageDescription: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam dui odio, tincidunt nec tortor sed, suscipit aliquet turpis. Suspendisse potenti. Pellentesque cursus maximus lectus. Suspendisse lobortis risus quis erat pretium imperdiet. Vivamus tincidunt placerat dignissim. Duis consequat eleifend turpis a auctor. Donec ac imperdiet orci, sed porta orci. Nam vulputate at lorem eu consequat',
    };
  }

  render() {
    return (
        <div>
          <h3><a href={this.state.url}>{this.state.pageTitle}</a></h3>
          <h4>{this.state.pageDescription}</h4>
          {this.state.active ? <hr></hr> : ''}
        </div>
    );
  }

  //This function runs when render() is done!
  componentWillReceiveProps() {
    var resultsArray = this.props.results;
    console.log(this.props.value);
    var modelId = resultsArray[this.props.value];
    if(!modelId) {
      var nullobj;
      this.setState((prevState) => ({url: '/'}));
      this.setState((prevState) => ({pageTitle: nullobj}));
      this.setState((prevState) => ({pageDescription: nullobj}));
      this.setState((prevState) => ({active: false}));
    }
    var activeId = resultsArray[this.props.value+1]
    var newURL = this.getURL(modelId) + modelId;
    this.setState((prevState) => ({url: newURL}));
    this.setState((prevState) => ({active: activeId}));
    var modelDict = this.getObj(modelId);
  }

  getObj(id) {
    var nullobj;
    if(!id) {
      return nullobj;
    }
    var cat = id.charAt(0);
    if (cat == 'p') {
      cat = '/api/people';
    } else if (cat == 'f') {
      cat = '/api/financialorgs';
    } else if (cat == 'c') {
      cat = '/api/companies';
    } else {
      cat = '/api/cities';
    }

    var obj;
    // console.log(id);
    // console.log(cat);
    var functo = this.finishCall;
    var name;
    var summary;
    $.ajax({
      url: cat,
      type: "GET",
      data: {id:id},
      async: true,
      cache: false,
      success:
      function(result){
        obj = JSON.parse(result);
        // console.log(obj);
        //functo(obj, name, summary);
      }});


    setTimeout(() => {
        var name = this.finishCall(obj);
        // console.log(name);
        this.setState((prevState) => ({pageTitle: name}));
        }, 2000);

    setTimeout(() => {
      var summary = this.finishCallSum(obj);
      this.setState((prevState) => ({pageDescription: summary}));
      var query = this.props.query;
      // console.log(query);
      var markdowned;
      $.ajax({
        url: '/api/markdown',
        type: "GET",
        data: {text:summary, word:query},
        async: true,
        cache: false,
        success:
        function(result) {
          console.log("DONE");
          try {
            markdowned = JSON.parse(result)["result"];
          } catch (e) {

          }
          // console.log(markdowned);
        }});

      setTimeout(() => {
        if (markdowned) {
          this.setState(function (prevState) {
            return {pageDescription: (<div dangerouslySetInnerHTML={{__html: markdowned}}/>)};
          });
        }
      }, 2000);
    }, 2000);
  }

  finishCall(modelDict) {
    if(!modelDict) {
      return;
    }
    return modelDict['name'];
  }

  finishCallSum(modelDict) {
    if(!modelDict) {
      return;
    }
    return modelDict['summary'];
  }

  getURL(id) {
    if(!id) {
      var obj;
      return obj;
    }
    var cat = id.charAt(0);
    if (cat == 'p') {
      return '/category/people/';
    } else if (cat == 'f') {
      return '/category/financialorgs/';
    } else if (cat == 'c') {
      return '/category/companies/';
    } else {
      return '/category/cities/';
    }
  }

}

class BackPagination extends React.Component {
  render() {
    return (
      <div className="pull-left">
        <button className="btn btn-lg btn-red" onClick={this.props.onClick}>
          <h3>Prev Page</h3>
        </button>
      </div>
    );
  }
}

class ForwardPagination extends React.Component {
  render() {
    return (
      <div className="pull-right">
        <button className="btn btn-lg btn-blue" onClick={this.props.onClick}>
          <h3>Next Page</h3>
        </button>
      </div>
    );
  }
}

class FilterButton extends React.Component {
  swap() {
    let isAnd = this.props.filterFunction.isAnd;
    if (isAnd) {
      
    }
    let currentState = this.props.filterFunction.isAnd

  }
  render() {
    return (
      <button onClick={this.swap()}>{this.props.text}</button>
    )
  }
}

class SwitchButton extends React.Component {
  render() {
    return (
      <div className="pull-right">
        <button className="btn btn-lg btn-blue">
          <h3>Next Page</h3>
        </button>
      </div>
    );
  }
}

class ResultsList extends React.Component {
  constructor() {
    super();
    // results0 is and, results1 is or
    this.state = {
      startValue: 0,
      results0: Array(10).fill(null),
      results1: Array(10).fill(null),
      isAnd: true
    };

    this.handleBackClick = this.handleBackClick.bind(this);
    this.handleNextClick = this.handleNextClick.bind(this);
  }

  componentWillMount() {
    // console.log("mounting...")
    var query = "/search/" + this.props.query;
    var queryJSON = this.props.json;
    // console.log(query);

    $.ajax({
      url: query,
      type: "GET",
      async: true,
      cache: false,
      success:
      function(result){
        queryJSON = JSON.parse(result);
      }});

    setTimeout(() => {this.populateResults(queryJSON);}, 2000);
  }

  render() {
    // console.log("rendering...")
    return (
      <div>
        <div>{this.renderAnd()}{this.renderOr()}</div>
        <div>
          {this.renderResult(0)}
          {this.renderResult(1)}
          {this.renderResult(2)}
          {this.renderResult(3)}
          {this.renderResult(4)}
          {this.renderResult(5)}
          {this.renderResult(6)}
          {this.renderResult(7)}
          {this.renderResult(8)}
          {this.renderResult(9)}
          <hr className="search"></hr>
          {this.renderBack()}
          {this.renderNext()}
        </div>
      </div>
    );
  }

  renderResult(i) {
    console.log("rendering results again...");
    var query = this.props.query;
    var newVal = i+this.state.startValue;
    return <SearchResult results={this.state.results0} query={query} value={newVal} />;
  }

  renderAnd() {
    return <FilterButton text="and" currentState={this.state.isAnd} filterFunction={this.state} />;
  }

  renderOr() {
    return <FilterButton text="or" currentState={this.state.isAnd} filterFunction={this.state} />;
  }

  renderBack() {
    var click = this.handleBackClick;
    return <BackPagination onClick={click} />;
  }

  renderNext() {
    var click = this.handleNextClick;
    return <ForwardPagination onClick={click} />;
  }

  handleBackClick() {
    console.log("i just got clicked!");
    this.setState((prevState) => ({startValue: (prevState)-10}));
  }

  handleNextClick() {
    console.log("i just got clicked!");
    this.setState((prevState) => ({startValue: (prevState)+10}));
  }

  populateResults(obj) {
    // console.log(obj);
    var keyArray0 = Object.keys(obj[0]); //"and"
    var keyArray1 = Object.keys(obj[1]); //"or"
    this.setState((prevState) => ({results0: keyArray0}));
    // console.log(this.state.results0);
    this.setState((prevState) => ({results1: keyArray1}));
    // console.log(this.state.results1);
    this.forceUpdate();
    // console.log("finished update")
  }
}

// ========================================

var root = document.getElementById('resultsSection');

ReactDOM.render(
  <ResultsList {...(root.dataset)} />,
  root
);
