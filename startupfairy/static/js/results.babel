// TODO:
// - make pagination work by adding a value to keep track of which page ur on
// - make links clickable by using the id to populate SearchResult link
// - make forward/backward communicate with parent (resultlist) by using state
// - make a button to filter search results by and/or

class SearchResult extends React.Component {
  constructor() {
    super();
    this.state = {
      pageTitle: 'Result #',
      url: '/about',
      pageDescription: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam dui odio, tincidunt nec tortor sed, suscipit aliquet turpis. Suspendisse potenti. Pellentesque cursus maximus lectus. Suspendisse lobortis risus quis erat pretium imperdiet. Vivamus tincidunt placerat dignissim. Duis consequat eleifend turpis a auctor. Donec ac imperdiet orci, sed porta orci. Nam vulputate at lorem eu consequat',
    };
  }

  render() {
    console.log("rendering child");
    return (
        <div>
          <h3><a href="{url}">{this.state.pageTitle}</a></h3>
          <h4>{this.state.pageDescription}</h4>
        </div>
    );
  }

  //This function runs when render() is done!
  componentWillReceiveProps() {
    console.log("updating child...")
    //todo: write code that uses this.props.value and updates this.state
    var resultsArray = this.props.results;
    var modelId = resultsArray[this.props.value];

    var newPageTitle = 'something'
    this.setState((prevState) => ({pageTitle: modelId}));
    this.forceUpdate();

    //var description = 'new description here'
    //this.setState((prevState) => ({resultDescription: {description}}));
  }

  lookup(value) {
    //todo: using the ID, find the correct instance
  }

}

class BackPagination extends React.Component {
  render() {
    return (
      <div className="pull-left">
        <button className="btn btn-lg btn-red">
          <h3>Prev Page</h3>
        </button>
      </div>
    );
  }
}

class ForwardPagination extends React.Component {
  render() {
    return (
      <div className="pull-right">
        <button className="btn btn-lg btn-blue">
          <h3>Next Page</h3>
        </button>
      </div>
    );
  }
}

class ResultsList extends React.Component {
  constructor() {
    super();
    this.state = {
      startValue: 0,
      results0: ['c:1','c:2','c:3','c:4','c:5','c:6','c:7','c:8','c:9','c:10',],
      results1: Array(10).fill(null),
    };
  }

  componentWillMount() {
    console.log("mounting...")
    var query = "/search/" + this.props.query;
    var queryJSON = this.props.json;
    console.log(query);

    $.ajax({
      url: query,
      type: "GET",
      async: true,
      cache: false,
      success:
      function(result){
        queryJSON = JSON.parse(result);
      }});

    setTimeout(() => {this.populateResults(queryJSON);}, 2000);
  }

  render() {
    console.log("rendering...")
    return (
      <div>
        <SearchResult results={this.state.results0} value={0+this.state.startValue} />
        <hr></hr>
        {this.renderResult(1)}
        <hr></hr>
        {this.renderResult(2)}
        <hr></hr>
        {this.renderResult(3)}
        <hr></hr>
        {this.renderResult(4)}
        <hr></hr>
        {this.renderResult(5)}
        <hr></hr>
        {this.renderResult(6)}
        <hr></hr>
        {this.renderResult(7)}
        <hr></hr>
        {this.renderResult(8)}
        <hr></hr>
        {this.renderResult(9)}
        <br></br>
        <hr className="search"></hr>
        {this.renderBack()}
        {this.renderNext()}
      </div>
    );
  }

  renderResult(i) {
    return <SearchResult results={this.state.results0} value={i+this.state.startValue} />;
  }

  renderBack() {
    return <BackPagination />;
    //<h3> Page: {this.state.startValue + 1}</h3>
  }

  renderNext() {
    return <ForwardPagination />;
  }

  handleClick() {
    //this.setState({startValue: 10});
  }

  populateResults(obj) {
    console.log(obj);
    var keyArray0 = Object.keys(obj[0]);
    var keyArray1 = Object.keys(obj[1]);
    this.setState((prevState) => ({results0: keyArray0}));
    console.log(this.state.results0);
    this.setState((prevState) => ({results1: keyArray1}));
    console.log(this.state.results1);
    this.forceUpdate();
    console.log("finished update")
  }

}

// ========================================

var root = document.getElementById('resultsSection');

ReactDOM.render(
  <ResultsList {...(root.dataset)} />,
  root
);
