// TODO:
// - make pagination work by adding a value to keep track of which page ur on
// - make links clickable by using the id to populate SearchResult link
// - make forward/backward communicate with parent (resultlist) by using state
// - make a button to filter search results by and/or

class SearchResult extends React.Component {
  constructor() {
    super();
    this.state = {
      pageTitle: 'Result #',
      url: '/startupfairy/',
      active: true,
      pageDescription: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam dui odio, tincidunt nec tortor sed, suscipit aliquet turpis. Suspendisse potenti. Pellentesque cursus maximus lectus. Suspendisse lobortis risus quis erat pretium imperdiet. Vivamus tincidunt placerat dignissim. Duis consequat eleifend turpis a auctor. Donec ac imperdiet orci, sed porta orci. Nam vulputate at lorem eu consequat',
    };
  }

  render() {
    console.log("rendering child");
    return (
        <div>
          <h3><a href={this.state.url}>{this.state.pageTitle}</a></h3>
          <h4>{this.state.pageDescription}</h4>
          {this.state.active ? <hr></hr> : ''}
        </div>
    );
  }

  //This function runs when render() is done!
  componentWillReceiveProps() {
    console.log("updating child...")
    var resultsArray = this.props.results;
    var modelId = resultsArray[this.props.value];
    var activeId = resultsArray[this.props.value+1]
    //TODO: USE MODEL ID TO FIND THE INSTANCE IN DB
    //TODO: GET THE NAME OF THE MODEL
    var newTitle;
    this.setState((prevState) => ({pageTitle: modelId}));
    //TODO: GET THE DESCRIPTION OF THE MODEL
    var description;
    this.setState((prevState) => ({pageDescription: description}));
    //TODO: GET THE URL OF THE MODEL
    var newURL = this.getURL(modelId) + modelId;
    this.setState((prevState) => ({url: newURL}));
    this.setState((prevState) => ({active: activeId}));
  }

  getURL(id) {
    var cat = id.charAt(0);
    if (cat == 'p') {
      return 'startupfairy/category/people/';
    } else if (cat == 'f') {
      return 'startupfairy/category/financialorgs/';
    } else if (cat == 'c') {
      return 'startupfairy/category/companies/';
    } else {
      return 'startupfairy/category/cities/';
    }
  }

}

class BackPagination extends React.Component {
  render() {
    return (
      <div className="pull-left">
        <button className="btn btn-lg btn-red">
          <h3>Prev Page</h3>
        </button>
      </div>
    );
  }
}

class ForwardPagination extends React.Component {
  render() {
    return (
      <div className="pull-right">
        <button className="btn btn-lg btn-blue">
          <h3>Next Page</h3>
        </button>
      </div>
    );
  }
}

class ResultsList extends React.Component {
  constructor() {
    super();
    this.state = {
      startValue: 0,
      results0: ['c:1','c:2','c:3','c:4','c:5','c:6','c:7','c:8','c:9','c:10',],
      results1: Array(10).fill(null),
    };
  }

  componentWillMount() {
    console.log("mounting...")
    var query = "/search/" + this.props.query;
    var queryJSON = this.props.json;
    console.log(query);

    $.ajax({
      url: query,
      type: "GET",
      async: true,
      cache: false,
      success:
      function(result){
        queryJSON = JSON.parse(result);
      }});

    setTimeout(() => {this.populateResults(queryJSON);}, 2000);
  }

  render() {
    console.log("rendering...")
    return (
      <div>
        {this.renderResult(0)}
        {this.renderResult(1)}
        {this.renderResult(2)}
        {this.renderResult(3)}
        {this.renderResult(4)}
        {this.renderResult(5)}
        {this.renderResult(6)}
        {this.renderResult(7)}
        {this.renderResult(8)}
        {this.renderResult(9)}
        <hr className="search"></hr>
        {this.renderBack()}
        {this.renderNext()}
      </div>
    );
  }

  renderResult(i) {
    return <SearchResult results={this.state.results0} value={i+this.state.startValue} />;
  }

  renderBack() {
    return <BackPagination />;
    //<h3> Page: {this.state.startValue + 1}</h3>
  }

  renderNext() {
    return <ForwardPagination />;
  }

  handleClick() {
    //this.setState({startValue: 10});
  }

  populateResults(obj) {
    console.log(obj);
    var keyArray0 = Object.keys(obj[0]);
    var keyArray1 = Object.keys(obj[1]);
    this.setState((prevState) => ({results0: keyArray0}));
    console.log(this.state.results0);
    this.setState((prevState) => ({results1: keyArray1}));
    console.log(this.state.results1);
    this.forceUpdate();
    console.log("finished update")
  }

}

// ========================================

var root = document.getElementById('resultsSection');

ReactDOM.render(
  <ResultsList {...(root.dataset)} />,
  root
);
